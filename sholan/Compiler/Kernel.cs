using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace sholan.Compiler
{
    public class Kernel
    {
        private Stack<Scope> scopeStack = new Stack<Scope>();

        private List<Operation> operations = new List<Operation>();

        public Scope CurrentScope
        {
            get
            {
                return scopeStack.Peek();
            }
        }

        public Kernel()
        {
            PushScope();
        }

        public Scope PushScope()
        {
            Scope scope = new Scope();
            scopeStack.Push(scope);
            return scope;
        }

        public Scope PopScope()
        {
            return scopeStack.Pop();
        }

        public Symbol RegisterSymbol(Symbol symbol)
        {
            symbol.SScope = this.CurrentScope;
            this.CurrentScope.Symbols.Add(symbol.Name, symbol);
            return symbol;
        }

        public Symbol Lookup(string symbolName)
        {
            foreach(Scope scope in scopeStack)
            {
                if(scope.Symbols.ContainsKey(symbolName))
                {
                    return scope.Symbols[symbolName];
                }
            }

            throw new KeyNotFoundException(string.Format("Unknown symbol \"{0}\"", symbolName));
        }

        public Operation Emit(Opcode o)
        {
            Operation op = new Operation()
                {
                    Op = o,
                    Argument = string.Empty
                };
            this.operations.Add(op);
            return op;
        }

        public Operation Emit(Opcode o, string argument)
        {
            Operation op = new Operation()
            {
                Op = o,
                Argument = argument
            };
            this.operations.Add(op);
            return op;
        }

        public Operation EmitPush(string argument)
        {
            Operation op = new Operation()
            {
                Op = Opcode.PUSH,
                Argument = argument
            };
            this.operations.Add(op);
            return op;
        }

        public void Compile(Nodes.ICompileNode root)
        {
            root.PrePass(this);
            root.PreCompile(this);
            root.Compile(this);
        }

        public void EndCompile()
        {
            this.Emit(Opcode.HALT).Comment = "end compile";
        }

        public void Write(string file)
        {
            using(StreamWriter writer = new StreamWriter(file))
            {
                writer.Write("; Generated by sholan compiler" + Environment.NewLine);

                foreach(Operation op in this.operations)
                {
                    writer.Write(op.GetOutput() + Environment.NewLine);
                }
            }
        }
    }
}
